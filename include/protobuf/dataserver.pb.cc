// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataserver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dataserver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dataserver {

namespace {

const ::google::protobuf::Descriptor* UserStockCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStockCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetUsrStkCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetUsrStkCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleUserStkCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleUserStkCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* IncrUsrStkCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IncrUsrStkCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUsrStkCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUsrStkCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetIncrStkCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetIncrStkCfg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UidDevices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UidDevices_reflection_ = NULL;
const ::google::protobuf::Descriptor* UidDevices_appinfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UidDevices_appinfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetUidDevices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetUidDevices_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUidDevices_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUidDevices_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsrStockRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsrStockRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* UidDeviceRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UidDeviceRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* flagtype_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dataserver_2eproto() {
  protobuf_AddDesc_dataserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dataserver.proto");
  GOOGLE_CHECK(file != NULL);
  UserStockCfg_descriptor_ = file->message_type(0);
  static const int UserStockCfg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStockCfg, stockcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStockCfg, bulletin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStockCfg, max_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStockCfg, min_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStockCfg, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStockCfg, run_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStockCfg, incrementid_),
  };
  UserStockCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStockCfg_descriptor_,
      UserStockCfg::default_instance_,
      UserStockCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStockCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStockCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStockCfg));
  SetUsrStkCfg_descriptor_ = file->message_type(1);
  static const int SetUsrStkCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUsrStkCfg, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUsrStkCfg, usrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUsrStkCfg, stkcfg_),
  };
  SetUsrStkCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetUsrStkCfg_descriptor_,
      SetUsrStkCfg::default_instance_,
      SetUsrStkCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUsrStkCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUsrStkCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetUsrStkCfg));
  SingleUserStkCfg_descriptor_ = file->message_type(2);
  static const int SingleUserStkCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserStkCfg, usrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserStkCfg, stkcfg_),
  };
  SingleUserStkCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleUserStkCfg_descriptor_,
      SingleUserStkCfg::default_instance_,
      SingleUserStkCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserStkCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleUserStkCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleUserStkCfg));
  IncrUsrStkCfg_descriptor_ = file->message_type(3);
  static const int IncrUsrStkCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncrUsrStkCfg, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncrUsrStkCfg, items_),
  };
  IncrUsrStkCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IncrUsrStkCfg_descriptor_,
      IncrUsrStkCfg::default_instance_,
      IncrUsrStkCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncrUsrStkCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IncrUsrStkCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IncrUsrStkCfg));
  GetUsrStkCfg_descriptor_ = file->message_type(4);
  static const int GetUsrStkCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUsrStkCfg, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUsrStkCfg, usrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUsrStkCfg, incrementid_),
  };
  GetUsrStkCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUsrStkCfg_descriptor_,
      GetUsrStkCfg::default_instance_,
      GetUsrStkCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUsrStkCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUsrStkCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUsrStkCfg));
  GetIncrStkCfg_descriptor_ = file->message_type(5);
  static const int GetIncrStkCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncrStkCfg, incrementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncrStkCfg, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncrStkCfg, taskid_),
  };
  GetIncrStkCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetIncrStkCfg_descriptor_,
      GetIncrStkCfg::default_instance_,
      GetIncrStkCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncrStkCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetIncrStkCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetIncrStkCfg));
  UidDevices_descriptor_ = file->message_type(6);
  static const int UidDevices_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices, osversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices, comment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices, apps_),
  };
  UidDevices_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UidDevices_descriptor_,
      UidDevices::default_instance_,
      UidDevices_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UidDevices));
  UidDevices_appinfos_descriptor_ = UidDevices_descriptor_->nested_type(0);
  static const int UidDevices_appinfos_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices_appinfos, apptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices_appinfos, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices_appinfos, lastuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices_appinfos, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices_appinfos, appversion_),
  };
  UidDevices_appinfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UidDevices_appinfos_descriptor_,
      UidDevices_appinfos::default_instance_,
      UidDevices_appinfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices_appinfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDevices_appinfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UidDevices_appinfos));
  SetUidDevices_descriptor_ = file->message_type(7);
  static const int SetUidDevices_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUidDevices, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUidDevices, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUidDevices, data_),
  };
  SetUidDevices_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetUidDevices_descriptor_,
      SetUidDevices::default_instance_,
      SetUidDevices_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUidDevices, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetUidDevices, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetUidDevices));
  GetUidDevices_descriptor_ = file->message_type(8);
  static const int GetUidDevices_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUidDevices, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUidDevices, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUidDevices, incrementid_),
  };
  GetUidDevices_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUidDevices_descriptor_,
      GetUidDevices::default_instance_,
      GetUidDevices_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUidDevices, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUidDevices, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUidDevices));
  UsrStockRes_descriptor_ = file->message_type(9);
  static const int UsrStockRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrStockRes, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrStockRes, response_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrStockRes, usrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrStockRes, data_),
  };
  UsrStockRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsrStockRes_descriptor_,
      UsrStockRes::default_instance_,
      UsrStockRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrStockRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsrStockRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsrStockRes));
  UidDeviceRes_descriptor_ = file->message_type(10);
  static const int UidDeviceRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDeviceRes, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDeviceRes, reponse_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDeviceRes, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDeviceRes, data_),
  };
  UidDeviceRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UidDeviceRes_descriptor_,
      UidDeviceRes::default_instance_,
      UidDeviceRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDeviceRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UidDeviceRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UidDeviceRes));
  ResponseCode_descriptor_ = file->enum_type(0);
  flagtype_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dataserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStockCfg_descriptor_, &UserStockCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetUsrStkCfg_descriptor_, &SetUsrStkCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleUserStkCfg_descriptor_, &SingleUserStkCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IncrUsrStkCfg_descriptor_, &IncrUsrStkCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUsrStkCfg_descriptor_, &GetUsrStkCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetIncrStkCfg_descriptor_, &GetIncrStkCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UidDevices_descriptor_, &UidDevices::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UidDevices_appinfos_descriptor_, &UidDevices_appinfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetUidDevices_descriptor_, &SetUidDevices::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUidDevices_descriptor_, &GetUidDevices::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsrStockRes_descriptor_, &UsrStockRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UidDeviceRes_descriptor_, &UidDeviceRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dataserver_2eproto() {
  delete UserStockCfg::default_instance_;
  delete UserStockCfg_reflection_;
  delete SetUsrStkCfg::default_instance_;
  delete SetUsrStkCfg_reflection_;
  delete SingleUserStkCfg::default_instance_;
  delete SingleUserStkCfg_reflection_;
  delete IncrUsrStkCfg::default_instance_;
  delete IncrUsrStkCfg_reflection_;
  delete GetUsrStkCfg::default_instance_;
  delete GetUsrStkCfg_reflection_;
  delete GetIncrStkCfg::default_instance_;
  delete GetIncrStkCfg_reflection_;
  delete UidDevices::default_instance_;
  delete UidDevices_reflection_;
  delete UidDevices_appinfos::default_instance_;
  delete UidDevices_appinfos_reflection_;
  delete SetUidDevices::default_instance_;
  delete SetUidDevices_reflection_;
  delete GetUidDevices::default_instance_;
  delete GetUidDevices_reflection_;
  delete UsrStockRes::default_instance_;
  delete UsrStockRes_reflection_;
  delete UidDeviceRes::default_instance_;
  delete UidDeviceRes_reflection_;
}

void protobuf_AddDesc_dataserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020dataserver.proto\022\ndataserver\"\220\001\n\014UserS"
    "tockCfg\022\021\n\tstockcode\030\001 \002(\t\022\023\n\010bulletin\030\002"
    " \002(\003:\0011\022\021\n\tmax_price\030\003 \001(\002\022\021\n\tmin_price\030"
    "\004 \001(\002\022\r\n\005range\030\005 \001(\002\022\016\n\003run\030\006 \002(\003:\0011\022\023\n\013"
    "incrementid\030\007 \002(\003\"W\n\014SetUsrStkCfg\022\016\n\006tas"
    "kid\030\001 \002(\t\022\r\n\005usrid\030\002 \002(\t\022(\n\006stkcfg\030\003 \003(\013"
    "2\030.dataserver.UserStockCfg\"K\n\020SingleUser"
    "StkCfg\022\r\n\005usrid\030\001 \002(\t\022(\n\006stkcfg\030\002 \003(\0132\030."
    "dataserver.UserStockCfg\"L\n\rIncrUsrStkCfg"
    "\022\016\n\006taskid\030\001 \002(\t\022+\n\005items\030\002 \003(\0132\034.datase"
    "rver.SingleUserStkCfg\"B\n\014GetUsrStkCfg\022\016\n"
    "\006taskid\030\001 \002(\t\022\r\n\005usrid\030\002 \002(\t\022\023\n\013incremen"
    "tid\030\003 \001(\003\"C\n\rGetIncrStkCfg\022\023\n\013incrementi"
    "d\030\001 \002(\003\022\r\n\005count\030\002 \002(\003\022\016\n\006taskid\030\003 \002(\t\"\336"
    "\001\n\nUidDevices\022\021\n\tosversion\030\001 \002(\t\022\017\n\007comm"
    "ent\030\002 \001(\t\022-\n\004apps\030\003 \003(\0132\037.dataserver.Uid"
    "Devices.appinfos\032}\n\010appinfos\022\017\n\007apptype\030"
    "\001 \002(\t\022)\n\004flag\030\002 \002(\0162\024.dataserver.flagtyp"
    "e:\005VALID\022\017\n\007lastuid\030\003 \002(\t\022\020\n\010lasttime\030\004 "
    "\002(\003\022\022\n\nappversion\030\005 \002(\t\"U\n\rSetUidDevices"
    "\022\016\n\006taskid\030\001 \002(\t\022\016\n\006device\030\002 \002(\t\022$\n\004data"
    "\030\003 \003(\0132\026.dataserver.UidDevices\"D\n\rGetUid"
    "Devices\022\016\n\006taskid\030\001 \002(\t\022\016\n\006device\030\002 \002(\t\022"
    "\023\n\013incrementid\030\003 \001(\003\"\205\001\n\013UsrStockRes\022\016\n\006"
    "taskid\030\001 \002(\t\022/\n\rresponse_code\030\002 \002(\0162\030.da"
    "taserver.ResponseCode\022\r\n\005usrid\030\003 \001(\t\022&\n\004"
    "data\030\004 \003(\0132\030.dataserver.UserStockCfg\"\204\001\n"
    "\014UidDeviceRes\022\016\n\006taskid\030\001 \002(\t\022.\n\014reponse"
    "_code\030\002 \002(\0162\030.dataserver.ResponseCode\022\016\n"
    "\006device\030\003 \001(\t\022$\n\004data\030\004 \003(\0132\026.dataserver"
    ".UidDevices*\221\001\n\014ResponseCode\022\006\n\002OK\020\000\022\025\n\010"
    "NOT_FIND\020\377\377\377\377\377\377\377\377\377\001\022\025\n\010TIME_OUT\020\376\377\377\377\377\377\377\377"
    "\377\001\022\034\n\017SERVER_INTERNAL\020\375\377\377\377\377\377\377\377\377\001\022\027\n\nEXIS"
    "T_TASK\020\374\377\377\377\377\377\377\377\377\001\022\024\n\007UNKNOWN\020\230\370\377\377\377\377\377\377\377\001*"
    "+\n\010flagtype\022\t\n\005VALID\020\001\022\024\n\007INVALID\020\377\377\377\377\377\377"
    "\377\377\377\001", 1404);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dataserver.proto", &protobuf_RegisterTypes);
  UserStockCfg::default_instance_ = new UserStockCfg();
  SetUsrStkCfg::default_instance_ = new SetUsrStkCfg();
  SingleUserStkCfg::default_instance_ = new SingleUserStkCfg();
  IncrUsrStkCfg::default_instance_ = new IncrUsrStkCfg();
  GetUsrStkCfg::default_instance_ = new GetUsrStkCfg();
  GetIncrStkCfg::default_instance_ = new GetIncrStkCfg();
  UidDevices::default_instance_ = new UidDevices();
  UidDevices_appinfos::default_instance_ = new UidDevices_appinfos();
  SetUidDevices::default_instance_ = new SetUidDevices();
  GetUidDevices::default_instance_ = new GetUidDevices();
  UsrStockRes::default_instance_ = new UsrStockRes();
  UidDeviceRes::default_instance_ = new UidDeviceRes();
  UserStockCfg::default_instance_->InitAsDefaultInstance();
  SetUsrStkCfg::default_instance_->InitAsDefaultInstance();
  SingleUserStkCfg::default_instance_->InitAsDefaultInstance();
  IncrUsrStkCfg::default_instance_->InitAsDefaultInstance();
  GetUsrStkCfg::default_instance_->InitAsDefaultInstance();
  GetIncrStkCfg::default_instance_->InitAsDefaultInstance();
  UidDevices::default_instance_->InitAsDefaultInstance();
  UidDevices_appinfos::default_instance_->InitAsDefaultInstance();
  SetUidDevices::default_instance_->InitAsDefaultInstance();
  GetUidDevices::default_instance_->InitAsDefaultInstance();
  UsrStockRes::default_instance_->InitAsDefaultInstance();
  UidDeviceRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dataserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dataserver_2eproto {
  StaticDescriptorInitializer_dataserver_2eproto() {
    protobuf_AddDesc_dataserver_2eproto();
  }
} static_descriptor_initializer_dataserver_2eproto_;
const ::google::protobuf::EnumDescriptor* ResponseCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCode_descriptor_;
}
bool ResponseCode_IsValid(int value) {
  switch(value) {
    case -1000:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* flagtype_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return flagtype_descriptor_;
}
bool flagtype_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserStockCfg::kStockcodeFieldNumber;
const int UserStockCfg::kBulletinFieldNumber;
const int UserStockCfg::kMaxPriceFieldNumber;
const int UserStockCfg::kMinPriceFieldNumber;
const int UserStockCfg::kRangeFieldNumber;
const int UserStockCfg::kRunFieldNumber;
const int UserStockCfg::kIncrementidFieldNumber;
#endif  // !_MSC_VER

UserStockCfg::UserStockCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStockCfg::InitAsDefaultInstance() {
}

UserStockCfg::UserStockCfg(const UserStockCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStockCfg::SharedCtor() {
  _cached_size_ = 0;
  stockcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bulletin_ = GOOGLE_LONGLONG(1);
  max_price_ = 0;
  min_price_ = 0;
  range_ = 0;
  run_ = GOOGLE_LONGLONG(1);
  incrementid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStockCfg::~UserStockCfg() {
  SharedDtor();
}

void UserStockCfg::SharedDtor() {
  if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
    delete stockcode_;
  }
  if (this != default_instance_) {
  }
}

void UserStockCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStockCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStockCfg_descriptor_;
}

const UserStockCfg& UserStockCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

UserStockCfg* UserStockCfg::default_instance_ = NULL;

UserStockCfg* UserStockCfg::New() const {
  return new UserStockCfg;
}

void UserStockCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stockcode()) {
      if (stockcode_ != &::google::protobuf::internal::kEmptyString) {
        stockcode_->clear();
      }
    }
    bulletin_ = GOOGLE_LONGLONG(1);
    max_price_ = 0;
    min_price_ = 0;
    range_ = 0;
    run_ = GOOGLE_LONGLONG(1);
    incrementid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStockCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stockcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stockcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stockcode().data(), this->stockcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bulletin;
        break;
      }

      // required int64 bulletin = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bulletin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bulletin_)));
          set_has_bulletin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_max_price;
        break;
      }

      // optional float max_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_max_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_price_)));
          set_has_max_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_min_price;
        break;
      }

      // optional float min_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_min_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_price_)));
          set_has_min_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_range;
        break;
      }

      // optional float range = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_run;
        break;
      }

      // required int64 run = 6 [default = 1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &run_)));
          set_has_run();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_incrementid;
        break;
      }

      // required int64 incrementid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incrementid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &incrementid_)));
          set_has_incrementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStockCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stockcode(), output);
  }

  // required int64 bulletin = 2 [default = 1];
  if (has_bulletin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bulletin(), output);
  }

  // optional float max_price = 3;
  if (has_max_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_price(), output);
  }

  // optional float min_price = 4;
  if (has_min_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->min_price(), output);
  }

  // optional float range = 5;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range(), output);
  }

  // required int64 run = 6 [default = 1];
  if (has_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->run(), output);
  }

  // required int64 incrementid = 7;
  if (has_incrementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->incrementid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStockCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stockcode = 1;
  if (has_stockcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stockcode().data(), this->stockcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stockcode(), target);
  }

  // required int64 bulletin = 2 [default = 1];
  if (has_bulletin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bulletin(), target);
  }

  // optional float max_price = 3;
  if (has_max_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_price(), target);
  }

  // optional float min_price = 4;
  if (has_min_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->min_price(), target);
  }

  // optional float range = 5;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range(), target);
  }

  // required int64 run = 6 [default = 1];
  if (has_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->run(), target);
  }

  // required int64 incrementid = 7;
  if (has_incrementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->incrementid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStockCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stockcode = 1;
    if (has_stockcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stockcode());
    }

    // required int64 bulletin = 2 [default = 1];
    if (has_bulletin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bulletin());
    }

    // optional float max_price = 3;
    if (has_max_price()) {
      total_size += 1 + 4;
    }

    // optional float min_price = 4;
    if (has_min_price()) {
      total_size += 1 + 4;
    }

    // optional float range = 5;
    if (has_range()) {
      total_size += 1 + 4;
    }

    // required int64 run = 6 [default = 1];
    if (has_run()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->run());
    }

    // required int64 incrementid = 7;
    if (has_incrementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->incrementid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStockCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStockCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStockCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStockCfg::MergeFrom(const UserStockCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stockcode()) {
      set_stockcode(from.stockcode());
    }
    if (from.has_bulletin()) {
      set_bulletin(from.bulletin());
    }
    if (from.has_max_price()) {
      set_max_price(from.max_price());
    }
    if (from.has_min_price()) {
      set_min_price(from.min_price());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_run()) {
      set_run(from.run());
    }
    if (from.has_incrementid()) {
      set_incrementid(from.incrementid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStockCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStockCfg::CopyFrom(const UserStockCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStockCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000063) != 0x00000063) return false;

  return true;
}

void UserStockCfg::Swap(UserStockCfg* other) {
  if (other != this) {
    std::swap(stockcode_, other->stockcode_);
    std::swap(bulletin_, other->bulletin_);
    std::swap(max_price_, other->max_price_);
    std::swap(min_price_, other->min_price_);
    std::swap(range_, other->range_);
    std::swap(run_, other->run_);
    std::swap(incrementid_, other->incrementid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStockCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStockCfg_descriptor_;
  metadata.reflection = UserStockCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetUsrStkCfg::kTaskidFieldNumber;
const int SetUsrStkCfg::kUsridFieldNumber;
const int SetUsrStkCfg::kStkcfgFieldNumber;
#endif  // !_MSC_VER

SetUsrStkCfg::SetUsrStkCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetUsrStkCfg::InitAsDefaultInstance() {
}

SetUsrStkCfg::SetUsrStkCfg(const SetUsrStkCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetUsrStkCfg::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetUsrStkCfg::~SetUsrStkCfg() {
  SharedDtor();
}

void SetUsrStkCfg::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (usrid_ != &::google::protobuf::internal::kEmptyString) {
    delete usrid_;
  }
  if (this != default_instance_) {
  }
}

void SetUsrStkCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUsrStkCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetUsrStkCfg_descriptor_;
}

const SetUsrStkCfg& SetUsrStkCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

SetUsrStkCfg* SetUsrStkCfg::default_instance_ = NULL;

SetUsrStkCfg* SetUsrStkCfg::New() const {
  return new SetUsrStkCfg;
}

void SetUsrStkCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_usrid()) {
      if (usrid_ != &::google::protobuf::internal::kEmptyString) {
        usrid_->clear();
      }
    }
  }
  stkcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetUsrStkCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_usrid;
        break;
      }

      // required string usrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usrid().data(), this->usrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stkcfg;
        break;
      }

      // repeated .dataserver.UserStockCfg stkcfg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stkcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stkcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stkcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetUsrStkCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required string usrid = 2;
  if (has_usrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrid().data(), this->usrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usrid(), output);
  }

  // repeated .dataserver.UserStockCfg stkcfg = 3;
  for (int i = 0; i < this->stkcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stkcfg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetUsrStkCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required string usrid = 2;
  if (has_usrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrid().data(), this->usrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->usrid(), target);
  }

  // repeated .dataserver.UserStockCfg stkcfg = 3;
  for (int i = 0; i < this->stkcfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stkcfg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetUsrStkCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required string usrid = 2;
    if (has_usrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usrid());
    }

  }
  // repeated .dataserver.UserStockCfg stkcfg = 3;
  total_size += 1 * this->stkcfg_size();
  for (int i = 0; i < this->stkcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stkcfg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUsrStkCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetUsrStkCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetUsrStkCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetUsrStkCfg::MergeFrom(const SetUsrStkCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  stkcfg_.MergeFrom(from.stkcfg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_usrid()) {
      set_usrid(from.usrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetUsrStkCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUsrStkCfg::CopyFrom(const SetUsrStkCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUsrStkCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < stkcfg_size(); i++) {
    if (!this->stkcfg(i).IsInitialized()) return false;
  }
  return true;
}

void SetUsrStkCfg::Swap(SetUsrStkCfg* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(usrid_, other->usrid_);
    stkcfg_.Swap(&other->stkcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetUsrStkCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetUsrStkCfg_descriptor_;
  metadata.reflection = SetUsrStkCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleUserStkCfg::kUsridFieldNumber;
const int SingleUserStkCfg::kStkcfgFieldNumber;
#endif  // !_MSC_VER

SingleUserStkCfg::SingleUserStkCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleUserStkCfg::InitAsDefaultInstance() {
}

SingleUserStkCfg::SingleUserStkCfg(const SingleUserStkCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleUserStkCfg::SharedCtor() {
  _cached_size_ = 0;
  usrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleUserStkCfg::~SingleUserStkCfg() {
  SharedDtor();
}

void SingleUserStkCfg::SharedDtor() {
  if (usrid_ != &::google::protobuf::internal::kEmptyString) {
    delete usrid_;
  }
  if (this != default_instance_) {
  }
}

void SingleUserStkCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleUserStkCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleUserStkCfg_descriptor_;
}

const SingleUserStkCfg& SingleUserStkCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

SingleUserStkCfg* SingleUserStkCfg::default_instance_ = NULL;

SingleUserStkCfg* SingleUserStkCfg::New() const {
  return new SingleUserStkCfg;
}

void SingleUserStkCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_usrid()) {
      if (usrid_ != &::google::protobuf::internal::kEmptyString) {
        usrid_->clear();
      }
    }
  }
  stkcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleUserStkCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string usrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usrid().data(), this->usrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stkcfg;
        break;
      }

      // repeated .dataserver.UserStockCfg stkcfg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stkcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stkcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stkcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleUserStkCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string usrid = 1;
  if (has_usrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrid().data(), this->usrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->usrid(), output);
  }

  // repeated .dataserver.UserStockCfg stkcfg = 2;
  for (int i = 0; i < this->stkcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stkcfg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleUserStkCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string usrid = 1;
  if (has_usrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrid().data(), this->usrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->usrid(), target);
  }

  // repeated .dataserver.UserStockCfg stkcfg = 2;
  for (int i = 0; i < this->stkcfg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stkcfg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleUserStkCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string usrid = 1;
    if (has_usrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usrid());
    }

  }
  // repeated .dataserver.UserStockCfg stkcfg = 2;
  total_size += 1 * this->stkcfg_size();
  for (int i = 0; i < this->stkcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stkcfg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleUserStkCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleUserStkCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleUserStkCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleUserStkCfg::MergeFrom(const SingleUserStkCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  stkcfg_.MergeFrom(from.stkcfg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usrid()) {
      set_usrid(from.usrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleUserStkCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleUserStkCfg::CopyFrom(const SingleUserStkCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleUserStkCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < stkcfg_size(); i++) {
    if (!this->stkcfg(i).IsInitialized()) return false;
  }
  return true;
}

void SingleUserStkCfg::Swap(SingleUserStkCfg* other) {
  if (other != this) {
    std::swap(usrid_, other->usrid_);
    stkcfg_.Swap(&other->stkcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleUserStkCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleUserStkCfg_descriptor_;
  metadata.reflection = SingleUserStkCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IncrUsrStkCfg::kTaskidFieldNumber;
const int IncrUsrStkCfg::kItemsFieldNumber;
#endif  // !_MSC_VER

IncrUsrStkCfg::IncrUsrStkCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IncrUsrStkCfg::InitAsDefaultInstance() {
}

IncrUsrStkCfg::IncrUsrStkCfg(const IncrUsrStkCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IncrUsrStkCfg::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IncrUsrStkCfg::~IncrUsrStkCfg() {
  SharedDtor();
}

void IncrUsrStkCfg::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
  }
}

void IncrUsrStkCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IncrUsrStkCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IncrUsrStkCfg_descriptor_;
}

const IncrUsrStkCfg& IncrUsrStkCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

IncrUsrStkCfg* IncrUsrStkCfg::default_instance_ = NULL;

IncrUsrStkCfg* IncrUsrStkCfg::New() const {
  return new IncrUsrStkCfg;
}

void IncrUsrStkCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IncrUsrStkCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .dataserver.SingleUserStkCfg items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IncrUsrStkCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // repeated .dataserver.SingleUserStkCfg items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IncrUsrStkCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // repeated .dataserver.SingleUserStkCfg items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IncrUsrStkCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

  }
  // repeated .dataserver.SingleUserStkCfg items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IncrUsrStkCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IncrUsrStkCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IncrUsrStkCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IncrUsrStkCfg::MergeFrom(const IncrUsrStkCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IncrUsrStkCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncrUsrStkCfg::CopyFrom(const IncrUsrStkCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrUsrStkCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void IncrUsrStkCfg::Swap(IncrUsrStkCfg* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IncrUsrStkCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IncrUsrStkCfg_descriptor_;
  metadata.reflection = IncrUsrStkCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUsrStkCfg::kTaskidFieldNumber;
const int GetUsrStkCfg::kUsridFieldNumber;
const int GetUsrStkCfg::kIncrementidFieldNumber;
#endif  // !_MSC_VER

GetUsrStkCfg::GetUsrStkCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUsrStkCfg::InitAsDefaultInstance() {
}

GetUsrStkCfg::GetUsrStkCfg(const GetUsrStkCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUsrStkCfg::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  incrementid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUsrStkCfg::~GetUsrStkCfg() {
  SharedDtor();
}

void GetUsrStkCfg::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (usrid_ != &::google::protobuf::internal::kEmptyString) {
    delete usrid_;
  }
  if (this != default_instance_) {
  }
}

void GetUsrStkCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUsrStkCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUsrStkCfg_descriptor_;
}

const GetUsrStkCfg& GetUsrStkCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

GetUsrStkCfg* GetUsrStkCfg::default_instance_ = NULL;

GetUsrStkCfg* GetUsrStkCfg::New() const {
  return new GetUsrStkCfg;
}

void GetUsrStkCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_usrid()) {
      if (usrid_ != &::google::protobuf::internal::kEmptyString) {
        usrid_->clear();
      }
    }
    incrementid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUsrStkCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_usrid;
        break;
      }

      // required string usrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usrid().data(), this->usrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_incrementid;
        break;
      }

      // optional int64 incrementid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incrementid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &incrementid_)));
          set_has_incrementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUsrStkCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required string usrid = 2;
  if (has_usrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrid().data(), this->usrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->usrid(), output);
  }

  // optional int64 incrementid = 3;
  if (has_incrementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->incrementid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUsrStkCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required string usrid = 2;
  if (has_usrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrid().data(), this->usrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->usrid(), target);
  }

  // optional int64 incrementid = 3;
  if (has_incrementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->incrementid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUsrStkCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required string usrid = 2;
    if (has_usrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usrid());
    }

    // optional int64 incrementid = 3;
    if (has_incrementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->incrementid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUsrStkCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUsrStkCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUsrStkCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUsrStkCfg::MergeFrom(const GetUsrStkCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_usrid()) {
      set_usrid(from.usrid());
    }
    if (from.has_incrementid()) {
      set_incrementid(from.incrementid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUsrStkCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUsrStkCfg::CopyFrom(const GetUsrStkCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUsrStkCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUsrStkCfg::Swap(GetUsrStkCfg* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(usrid_, other->usrid_);
    std::swap(incrementid_, other->incrementid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUsrStkCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUsrStkCfg_descriptor_;
  metadata.reflection = GetUsrStkCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetIncrStkCfg::kIncrementidFieldNumber;
const int GetIncrStkCfg::kCountFieldNumber;
const int GetIncrStkCfg::kTaskidFieldNumber;
#endif  // !_MSC_VER

GetIncrStkCfg::GetIncrStkCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetIncrStkCfg::InitAsDefaultInstance() {
}

GetIncrStkCfg::GetIncrStkCfg(const GetIncrStkCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetIncrStkCfg::SharedCtor() {
  _cached_size_ = 0;
  incrementid_ = GOOGLE_LONGLONG(0);
  count_ = GOOGLE_LONGLONG(0);
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetIncrStkCfg::~GetIncrStkCfg() {
  SharedDtor();
}

void GetIncrStkCfg::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
  }
}

void GetIncrStkCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetIncrStkCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetIncrStkCfg_descriptor_;
}

const GetIncrStkCfg& GetIncrStkCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

GetIncrStkCfg* GetIncrStkCfg::default_instance_ = NULL;

GetIncrStkCfg* GetIncrStkCfg::New() const {
  return new GetIncrStkCfg;
}

void GetIncrStkCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    incrementid_ = GOOGLE_LONGLONG(0);
    count_ = GOOGLE_LONGLONG(0);
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetIncrStkCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 incrementid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &incrementid_)));
          set_has_incrementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int64 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_taskid;
        break;
      }

      // required string taskid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetIncrStkCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 incrementid = 1;
  if (has_incrementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->incrementid(), output);
  }

  // required int64 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->count(), output);
  }

  // required string taskid = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetIncrStkCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 incrementid = 1;
  if (has_incrementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->incrementid(), target);
  }

  // required int64 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->count(), target);
  }

  // required string taskid = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetIncrStkCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 incrementid = 1;
    if (has_incrementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->incrementid());
    }

    // required int64 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->count());
    }

    // required string taskid = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetIncrStkCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetIncrStkCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetIncrStkCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetIncrStkCfg::MergeFrom(const GetIncrStkCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_incrementid()) {
      set_incrementid(from.incrementid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetIncrStkCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIncrStkCfg::CopyFrom(const GetIncrStkCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIncrStkCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetIncrStkCfg::Swap(GetIncrStkCfg* other) {
  if (other != this) {
    std::swap(incrementid_, other->incrementid_);
    std::swap(count_, other->count_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetIncrStkCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetIncrStkCfg_descriptor_;
  metadata.reflection = GetIncrStkCfg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UidDevices_appinfos::kApptypeFieldNumber;
const int UidDevices_appinfos::kFlagFieldNumber;
const int UidDevices_appinfos::kLastuidFieldNumber;
const int UidDevices_appinfos::kLasttimeFieldNumber;
const int UidDevices_appinfos::kAppversionFieldNumber;
#endif  // !_MSC_VER

UidDevices_appinfos::UidDevices_appinfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UidDevices_appinfos::InitAsDefaultInstance() {
}

UidDevices_appinfos::UidDevices_appinfos(const UidDevices_appinfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UidDevices_appinfos::SharedCtor() {
  _cached_size_ = 0;
  apptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = 1;
  lastuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lasttime_ = GOOGLE_LONGLONG(0);
  appversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UidDevices_appinfos::~UidDevices_appinfos() {
  SharedDtor();
}

void UidDevices_appinfos::SharedDtor() {
  if (apptype_ != &::google::protobuf::internal::kEmptyString) {
    delete apptype_;
  }
  if (lastuid_ != &::google::protobuf::internal::kEmptyString) {
    delete lastuid_;
  }
  if (appversion_ != &::google::protobuf::internal::kEmptyString) {
    delete appversion_;
  }
  if (this != default_instance_) {
  }
}

void UidDevices_appinfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UidDevices_appinfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UidDevices_appinfos_descriptor_;
}

const UidDevices_appinfos& UidDevices_appinfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

UidDevices_appinfos* UidDevices_appinfos::default_instance_ = NULL;

UidDevices_appinfos* UidDevices_appinfos::New() const {
  return new UidDevices_appinfos;
}

void UidDevices_appinfos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_apptype()) {
      if (apptype_ != &::google::protobuf::internal::kEmptyString) {
        apptype_->clear();
      }
    }
    flag_ = 1;
    if (has_lastuid()) {
      if (lastuid_ != &::google::protobuf::internal::kEmptyString) {
        lastuid_->clear();
      }
    }
    lasttime_ = GOOGLE_LONGLONG(0);
    if (has_appversion()) {
      if (appversion_ != &::google::protobuf::internal::kEmptyString) {
        appversion_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UidDevices_appinfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string apptype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->apptype().data(), this->apptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required .dataserver.flagtype flag = 2 [default = VALID];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dataserver::flagtype_IsValid(value)) {
            set_flag(static_cast< ::dataserver::flagtype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lastuid;
        break;
      }

      // required string lastuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastuid().data(), this->lastuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lasttime;
        break;
      }

      // required int64 lasttime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lasttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_appversion;
        break;
      }

      // required string appversion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appversion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appversion().data(), this->appversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UidDevices_appinfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string apptype = 1;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->apptype(), output);
  }

  // required .dataserver.flagtype flag = 2 [default = VALID];
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->flag(), output);
  }

  // required string lastuid = 3;
  if (has_lastuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastuid().data(), this->lastuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lastuid(), output);
  }

  // required int64 lasttime = 4;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lasttime(), output);
  }

  // required string appversion = 5;
  if (has_appversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->appversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UidDevices_appinfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string apptype = 1;
  if (has_apptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->apptype().data(), this->apptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->apptype(), target);
  }

  // required .dataserver.flagtype flag = 2 [default = VALID];
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->flag(), target);
  }

  // required string lastuid = 3;
  if (has_lastuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastuid().data(), this->lastuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lastuid(), target);
  }

  // required int64 lasttime = 4;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lasttime(), target);
  }

  // required string appversion = 5;
  if (has_appversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appversion().data(), this->appversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->appversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UidDevices_appinfos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string apptype = 1;
    if (has_apptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->apptype());
    }

    // required .dataserver.flagtype flag = 2 [default = VALID];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->flag());
    }

    // required string lastuid = 3;
    if (has_lastuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastuid());
    }

    // required int64 lasttime = 4;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // required string appversion = 5;
    if (has_appversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appversion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UidDevices_appinfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UidDevices_appinfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UidDevices_appinfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UidDevices_appinfos::MergeFrom(const UidDevices_appinfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apptype()) {
      set_apptype(from.apptype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_lastuid()) {
      set_lastuid(from.lastuid());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_appversion()) {
      set_appversion(from.appversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UidDevices_appinfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidDevices_appinfos::CopyFrom(const UidDevices_appinfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidDevices_appinfos::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void UidDevices_appinfos::Swap(UidDevices_appinfos* other) {
  if (other != this) {
    std::swap(apptype_, other->apptype_);
    std::swap(flag_, other->flag_);
    std::swap(lastuid_, other->lastuid_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(appversion_, other->appversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UidDevices_appinfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UidDevices_appinfos_descriptor_;
  metadata.reflection = UidDevices_appinfos_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UidDevices::kOsversionFieldNumber;
const int UidDevices::kCommentFieldNumber;
const int UidDevices::kAppsFieldNumber;
#endif  // !_MSC_VER

UidDevices::UidDevices()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UidDevices::InitAsDefaultInstance() {
}

UidDevices::UidDevices(const UidDevices& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UidDevices::SharedCtor() {
  _cached_size_ = 0;
  osversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UidDevices::~UidDevices() {
  SharedDtor();
}

void UidDevices::SharedDtor() {
  if (osversion_ != &::google::protobuf::internal::kEmptyString) {
    delete osversion_;
  }
  if (comment_ != &::google::protobuf::internal::kEmptyString) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void UidDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UidDevices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UidDevices_descriptor_;
}

const UidDevices& UidDevices::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

UidDevices* UidDevices::default_instance_ = NULL;

UidDevices* UidDevices::New() const {
  return new UidDevices;
}

void UidDevices::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_osversion()) {
      if (osversion_ != &::google::protobuf::internal::kEmptyString) {
        osversion_->clear();
      }
    }
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::kEmptyString) {
        comment_->clear();
      }
    }
  }
  apps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UidDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string osversion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_osversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->osversion().data(), this->osversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comment;
        break;
      }

      // optional string comment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apps;
        break;
      }

      // repeated .dataserver.UidDevices.appinfos apps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_apps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UidDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string osversion = 1;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->osversion(), output);
  }

  // optional string comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->comment(), output);
  }

  // repeated .dataserver.UidDevices.appinfos apps = 3;
  for (int i = 0; i < this->apps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->apps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UidDevices::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string osversion = 1;
  if (has_osversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->osversion().data(), this->osversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->osversion(), target);
  }

  // optional string comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  // repeated .dataserver.UidDevices.appinfos apps = 3;
  for (int i = 0; i < this->apps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->apps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UidDevices::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string osversion = 1;
    if (has_osversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->osversion());
    }

    // optional string comment = 2;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  // repeated .dataserver.UidDevices.appinfos apps = 3;
  total_size += 1 * this->apps_size();
  for (int i = 0; i < this->apps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apps(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UidDevices::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UidDevices* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UidDevices*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UidDevices::MergeFrom(const UidDevices& from) {
  GOOGLE_CHECK_NE(&from, this);
  apps_.MergeFrom(from.apps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_osversion()) {
      set_osversion(from.osversion());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UidDevices::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidDevices::CopyFrom(const UidDevices& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidDevices::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < apps_size(); i++) {
    if (!this->apps(i).IsInitialized()) return false;
  }
  return true;
}

void UidDevices::Swap(UidDevices* other) {
  if (other != this) {
    std::swap(osversion_, other->osversion_);
    std::swap(comment_, other->comment_);
    apps_.Swap(&other->apps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UidDevices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UidDevices_descriptor_;
  metadata.reflection = UidDevices_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetUidDevices::kTaskidFieldNumber;
const int SetUidDevices::kDeviceFieldNumber;
const int SetUidDevices::kDataFieldNumber;
#endif  // !_MSC_VER

SetUidDevices::SetUidDevices()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetUidDevices::InitAsDefaultInstance() {
}

SetUidDevices::SetUidDevices(const SetUidDevices& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetUidDevices::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetUidDevices::~SetUidDevices() {
  SharedDtor();
}

void SetUidDevices::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void SetUidDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetUidDevices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetUidDevices_descriptor_;
}

const SetUidDevices& SetUidDevices::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

SetUidDevices* SetUidDevices::default_instance_ = NULL;

SetUidDevices* SetUidDevices::New() const {
  return new SetUidDevices;
}

void SetUidDevices::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetUidDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // required string device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // repeated .dataserver.UidDevices data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetUidDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device(), output);
  }

  // repeated .dataserver.UidDevices data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetUidDevices::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  // repeated .dataserver.UidDevices data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetUidDevices::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required string device = 2;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  // repeated .dataserver.UidDevices data = 3;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetUidDevices::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetUidDevices* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetUidDevices*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetUidDevices::MergeFrom(const SetUidDevices& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetUidDevices::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetUidDevices::CopyFrom(const SetUidDevices& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUidDevices::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void SetUidDevices::Swap(SetUidDevices* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(device_, other->device_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetUidDevices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetUidDevices_descriptor_;
  metadata.reflection = SetUidDevices_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUidDevices::kTaskidFieldNumber;
const int GetUidDevices::kDeviceFieldNumber;
const int GetUidDevices::kIncrementidFieldNumber;
#endif  // !_MSC_VER

GetUidDevices::GetUidDevices()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUidDevices::InitAsDefaultInstance() {
}

GetUidDevices::GetUidDevices(const GetUidDevices& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUidDevices::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  incrementid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUidDevices::~GetUidDevices() {
  SharedDtor();
}

void GetUidDevices::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void GetUidDevices::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUidDevices::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUidDevices_descriptor_;
}

const GetUidDevices& GetUidDevices::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

GetUidDevices* GetUidDevices::default_instance_ = NULL;

GetUidDevices* GetUidDevices::New() const {
  return new GetUidDevices;
}

void GetUidDevices::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    incrementid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUidDevices::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // required string device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_incrementid;
        break;
      }

      // optional int64 incrementid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incrementid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &incrementid_)));
          set_has_incrementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUidDevices::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device(), output);
  }

  // optional int64 incrementid = 3;
  if (has_incrementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->incrementid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUidDevices::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  // optional int64 incrementid = 3;
  if (has_incrementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->incrementid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUidDevices::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required string device = 2;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional int64 incrementid = 3;
    if (has_incrementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->incrementid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUidDevices::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUidDevices* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUidDevices*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUidDevices::MergeFrom(const GetUidDevices& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_incrementid()) {
      set_incrementid(from.incrementid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUidDevices::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUidDevices::CopyFrom(const GetUidDevices& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUidDevices::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetUidDevices::Swap(GetUidDevices* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(device_, other->device_);
    std::swap(incrementid_, other->incrementid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUidDevices::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUidDevices_descriptor_;
  metadata.reflection = GetUidDevices_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsrStockRes::kTaskidFieldNumber;
const int UsrStockRes::kResponseCodeFieldNumber;
const int UsrStockRes::kUsridFieldNumber;
const int UsrStockRes::kDataFieldNumber;
#endif  // !_MSC_VER

UsrStockRes::UsrStockRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UsrStockRes::InitAsDefaultInstance() {
}

UsrStockRes::UsrStockRes(const UsrStockRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UsrStockRes::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_code_ = 0;
  usrid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsrStockRes::~UsrStockRes() {
  SharedDtor();
}

void UsrStockRes::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (usrid_ != &::google::protobuf::internal::kEmptyString) {
    delete usrid_;
  }
  if (this != default_instance_) {
  }
}

void UsrStockRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsrStockRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsrStockRes_descriptor_;
}

const UsrStockRes& UsrStockRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

UsrStockRes* UsrStockRes::default_instance_ = NULL;

UsrStockRes* UsrStockRes::New() const {
  return new UsrStockRes;
}

void UsrStockRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    response_code_ = 0;
    if (has_usrid()) {
      if (usrid_ != &::google::protobuf::internal::kEmptyString) {
        usrid_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsrStockRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_response_code;
        break;
      }

      // required .dataserver.ResponseCode response_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dataserver::ResponseCode_IsValid(value)) {
            set_response_code(static_cast< ::dataserver::ResponseCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_usrid;
        break;
      }

      // optional string usrid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usrid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usrid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usrid().data(), this->usrid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .dataserver.UserStockCfg data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UsrStockRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .dataserver.ResponseCode response_code = 2;
  if (has_response_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response_code(), output);
  }

  // optional string usrid = 3;
  if (has_usrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrid().data(), this->usrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->usrid(), output);
  }

  // repeated .dataserver.UserStockCfg data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UsrStockRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .dataserver.ResponseCode response_code = 2;
  if (has_response_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->response_code(), target);
  }

  // optional string usrid = 3;
  if (has_usrid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usrid().data(), this->usrid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->usrid(), target);
  }

  // repeated .dataserver.UserStockCfg data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UsrStockRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .dataserver.ResponseCode response_code = 2;
    if (has_response_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response_code());
    }

    // optional string usrid = 3;
    if (has_usrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usrid());
    }

  }
  // repeated .dataserver.UserStockCfg data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsrStockRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsrStockRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsrStockRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsrStockRes::MergeFrom(const UsrStockRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_response_code()) {
      set_response_code(from.response_code());
    }
    if (from.has_usrid()) {
      set_usrid(from.usrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsrStockRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsrStockRes::CopyFrom(const UsrStockRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsrStockRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void UsrStockRes::Swap(UsrStockRes* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(response_code_, other->response_code_);
    std::swap(usrid_, other->usrid_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsrStockRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsrStockRes_descriptor_;
  metadata.reflection = UsrStockRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UidDeviceRes::kTaskidFieldNumber;
const int UidDeviceRes::kReponseCodeFieldNumber;
const int UidDeviceRes::kDeviceFieldNumber;
const int UidDeviceRes::kDataFieldNumber;
#endif  // !_MSC_VER

UidDeviceRes::UidDeviceRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UidDeviceRes::InitAsDefaultInstance() {
}

UidDeviceRes::UidDeviceRes(const UidDeviceRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UidDeviceRes::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reponse_code_ = 0;
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UidDeviceRes::~UidDeviceRes() {
  SharedDtor();
}

void UidDeviceRes::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void UidDeviceRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UidDeviceRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UidDeviceRes_descriptor_;
}

const UidDeviceRes& UidDeviceRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dataserver_2eproto();
  return *default_instance_;
}

UidDeviceRes* UidDeviceRes::default_instance_ = NULL;

UidDeviceRes* UidDeviceRes::New() const {
  return new UidDeviceRes;
}

void UidDeviceRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    reponse_code_ = 0;
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UidDeviceRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reponse_code;
        break;
      }

      // required .dataserver.ResponseCode reponse_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reponse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dataserver::ResponseCode_IsValid(value)) {
            set_reponse_code(static_cast< ::dataserver::ResponseCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device;
        break;
      }

      // optional string device = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .dataserver.UidDevices data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UidDeviceRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // required .dataserver.ResponseCode reponse_code = 2;
  if (has_reponse_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reponse_code(), output);
  }

  // optional string device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device(), output);
  }

  // repeated .dataserver.UidDevices data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UidDeviceRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // required .dataserver.ResponseCode reponse_code = 2;
  if (has_reponse_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reponse_code(), target);
  }

  // optional string device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device(), target);
  }

  // repeated .dataserver.UidDevices data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UidDeviceRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // required .dataserver.ResponseCode reponse_code = 2;
    if (has_reponse_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reponse_code());
    }

    // optional string device = 3;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  // repeated .dataserver.UidDevices data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UidDeviceRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UidDeviceRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UidDeviceRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UidDeviceRes::MergeFrom(const UidDeviceRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_reponse_code()) {
      set_reponse_code(from.reponse_code());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UidDeviceRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UidDeviceRes::CopyFrom(const UidDeviceRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidDeviceRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void UidDeviceRes::Swap(UidDeviceRes* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(reponse_code_, other->reponse_code_);
    std::swap(device_, other->device_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UidDeviceRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UidDeviceRes_descriptor_;
  metadata.reflection = UidDeviceRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataserver

// @@protoc_insertion_point(global_scope)
